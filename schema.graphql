input AddContractJobInput {
    userId: ID!
    company: String!
    from: AWSDate!
    to: AWSDate
    hourlySalary: Int!
}

input AddFullTimeJobInput {
    userId: ID!
    company: String!
    from: AWSDate!
    to: AWSDate
    pensionPlan: Boolean!
    yearlySalary: Int!
}

type ContractJob implements Job {
    userId: ID!
    jobId: ID!
    company: String!
    from: AWSDate!
    to: AWSDate
    hourlySalary: Int!
}

input CreateUserInput {
    email: String!
    location: String!
    firstName: String!
    lastName: String!
    role: Role!
}

type FullTimeJob implements Job {
    userId: ID!
    jobId: ID!
    company: String!
    from: AWSDate!
    to: AWSDate
    pensionPlan: Boolean!
    yearlySalary: Int!
}

input GetJobsInput {
    userId: ID!
}

input GetUserInput {
    userId: ID!
}

input GetUsersInput {
    token: String!
}

interface Job {
    userId: ID!
    jobId: ID!
    company: String!
    from: AWSDate!
    to: AWSDate
}

enum Role {
    fullStack
    tested
    backend
    frontend
}

type User @aws_api_key
@aws_cognito_user_pools {
    userId: ID!
    email: String!
    location: String!
    firstName: String!
    lastName: String!
    role: Role!
    jobs: [Job]
}

type Mutation {
    createUser(input: CreateUserInput!): User
    addFullTimeJob(input: AddFullTimeJobInput!): FullTimeJob
    addContractJob(input: AddContractJobInput!): ContractJob
}

type Query {
    getUser(input: GetUserInput!): User
    getJobs(input: GetJobsInput!): [Job!]!
    getUsers(input: GetUsersInput!): [User!]!
    @aws_api_key
    @aws_cognito_user_pools
}

type Subscription {
    addedContractJob: ContractJob
    @aws_subscribe(mutations: ["addContractJob"])
}
